{"version":3,"sources":["components/Navbar.js","components/App.js","registerServiceWorker.js","components/ToastMessage.js","components/Signin.js","components/Signup.js","utils/index.js","components/Checkout.js","components/Brews.js","index.js"],"names":["clearToken","tokenKey","localStorage","removeItem","clearCart","Navbar","handleSignout","props","history","push","getItem","JSON","parse","getToken","this","React","Component","AuthNavbar","display","alignItems","justifyContent","height","color","padding","shape","NavLink","activeClassName","to","style","exact","margin","width","src","alt","naturalHeight","naturalWidth","onClick","text","inline","size","UnAuthNavbar","withRouter","apiUrl","process","API_URL","strapi","Strapi","App","state","brands","searchTerm","loadingBrands","handleChange","value","setState","filteredBrands","filter","brand","name","toLowerCase","includes","description","request","data","query","response","console","log","marginTop","id","accessibilityLabel","onChange","placeholder","icon","marginBottom","dangerouslySetInlineStyle","__style","backgroundColor","wrap","map","key","paddingY","image","fit","url","direction","Link","_id","show","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ToastMessage","message","bottom","left","transform","position","Signin","username","password","toast","toastMessage","loading","event","persist","target","handleSubmit","e","a","preventDefault","isFormEmpty","showToast","login","setToken","jwt","redirectUser","setItem","stringify","path","setTimeout","textAlign","maxWidth","onSubmit","type","disabled","Signup","email","calculateAmount","items","Number","reduce","acc","item","quantity","price","toFixed","_CheckoutForm","cartItems","address","postalCode","city","confirmationEmailAddress","orderProcessing","modal","getCart","cartKey","handleConfirmOrder","handleSubmitOrder","amount","stripe","createToken","token","createEntry","brews","redirect","displayTotalPrice","closeModal","length","Fragment","onReady","input","focus","align","italic","ConfirmationModal","accessibilityModalLabel","accessibilityCloseLabel","heading","onDismiss","footer","marginLeft","marginRight","role","CheckoutForm","injectStripe","Checkout","apiKey","Brews","addToCart","brew","alreadyInCart","findIndex","updatedItems","concat","setCart","deleteItemFromCart","itemDeleteId","filteredItems","params","brandId","flexWrap","alignSelf","wash","iconColor","PrivateRoute","component","rest","Route","render","Redirect","pathname","from","Root","BrowserRouter","Switch","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d1fd0795.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, Image, Button } from 'gestalt'\nimport { NavLink, withRouter } from 'react-router-dom'\n\nconst getToken = (tokenKey = \"jwt\") => {\n    if(localStorage && localStorage.getItem(tokenKey)) {\n        return JSON.parse(localStorage.getItem(tokenKey))\n    }\n    return null\n}\n\nconst clearToken = (tokenKey = \"jwt\") => {\n    if(localStorage){\n        localStorage.removeItem(tokenKey)\n    }\n}\n\nconst clearCart = (tokenKey = \"cart\") => {\n    if(localStorage){\n        localStorage.removeItem(tokenKey)\n    }\n}\n\nclass Navbar extends React.Component {\n\n    handleSignout = () => {\n        // clear token\n        clearToken()\n        // clear cart\n        clearCart()\n        //redirect home\n        this.props.history.push('/')\n    }\n\n    render(){\n        return getToken() !== null \n        ? <AuthNavbar handleSignout = {this.handleSignout} /> \n        : <UnAuthNavbar />\n    }\n}\n\nconst AuthNavbar = ({handleSignout}) => (\n    <Box\n    display =\"flex\"\n    alignItems = \"center\"\n    justifyContent=\"around\"\n    height = {70}\n    color = \"midnight\"\n    padding = {1}\n    shape = \"roundedBottom\"\n>\n\n{/* Checkout link */}\n<NavLink activeClassName=\"active\" to=\"/checkout\">\n    {/* <Text size=\"xl\" color=\"white\" >Sign In</Text> */}\n    <h2 style={{ color: 'white'}}>Checkout</h2>\n</NavLink>\n\n{/* Title and logo */}\n<NavLink activeClassName=\"active\" exact to=\"/\">\n    <Box display=\"flex\" alignItems=\"center\">\n        <Box margin={2} height={50} width={50} >\n            <Image \n                src=\"./icons/logo.svg\" \n                alt = \"Brewhub logo\"\n                naturalHeight = {1}\n                naturalWidth = {1}\n            />\n        </Box>\n        \n        <h2 style={{ color: 'orange'}}>Brewhub</h2>\n    </Box>\n</NavLink>\n\n{/* Signout link */}\n    <Button onClick={handleSignout} color=\"transparent\" text = \"Sign Out\" inline size=\"md\" />\n\n</Box>\n)\n\nconst UnAuthNavbar = () => (\n    <Box\n        display =\"flex\"\n        alignItems = \"center\"\n        justifyContent=\"around\"\n        height = {70}\n        color = \"midnight\"\n        padding = {1}\n        shape = \"roundedBottom\"\n    >\n\n    {/* Sign in link */}\n    <NavLink activeClassName=\"active\" to=\"/signin\">\n        {/* <Text size=\"xl\" color=\"white\" >Sign In</Text> */}\n        <h2 style={{ color: 'white'}}>Sign In</h2>\n    </NavLink>\n\n    {/* Title and logo */}\n    <NavLink activeClassName=\"active\" exact to=\"/\">\n        <Box display=\"flex\" alignItems=\"center\">\n            <Box margin={2} height={50} width={50} >\n                <Image \n                    src=\"./icons/logo.svg\" \n                    alt = \"Brewhub logo\"\n                    naturalHeight = {1}\n                    naturalWidth = {1}\n                />\n            </Box>\n            \n            <h2 style={{ color: 'orange'}}>Brewhub</h2>\n        </Box>\n    </NavLink>\n\n    {/* Sign up link */}\n    <NavLink activeClassName=\"active\" to=\"/signup\">\n        <h2 style={{ color: 'white'}}>Sign Up</h2>\n    </NavLink>\n    </Box>\n)\n\nexport default withRouter(Navbar)\n","import React, { Component } from 'react';\nimport { Container, Box, Card, Image, SearchField, Icon, Spinner } from 'gestalt'\nimport './App.css';\nimport { Link } from 'react-router-dom';\nimport Strapi from 'strapi-sdk-javascript/build/main'\n\n\nconst apiUrl = process.env.API_URL || 'http://localhost:1337'\nconst strapi = new Strapi(apiUrl)\n\nclass App extends Component {\n\n  state = {\n    brands: [],\n    searchTerm: '',\n    loadingBrands: true\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await strapi.request('POST', '/graphql', {\n        data: {\n          query: `query {\n            brands {\n              _id\n              name\n              description\n              image {\n                url\n              }\n            }\n          }` \n        }\n      })\n      // console.log(response);\n      this.setState({brands: response.data.brands, loadingBrands: false })\n    } catch (error) {\n      console.log(error);\n      this.setState({loadingBrands: false })\n    }\n    \n  }\n\n  handleChange = ({value}) => {\n    this.setState({searchTerm: value})\n  }\n  \n  filteredBrands = ({searchTerm, brands}) => {\n    return brands.filter(brand => {\n      return (\n        brand.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        brand.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    })\n  }\n\n  render() {\n    const {searchTerm, loadingBrands} = this.state\n    return (\n      <Container>\n        {/* Brands Search Field */}\n          <Box display=\"flex\" justifyContent = \"center\"  marginTop = {4}>\n            <SearchField \n              id = \"searchField\"\n              accessibilityLabel = \"Brand Search Field\"\n              onChange = {this.handleChange}\n              value = {searchTerm}\n              placeholder = \"Search Brands\"\n            />\n            <Box margin = {4}>\n              <Icon \n                icon = \"filter\"\n                color = { searchTerm ? \"orange\": \"gray\"}\n                size = {20}\n                accessibilityLabel = \"filter\"\n              />\n            </Box>\n          </Box>\n        \n\n\n        {/* Brands Section */}\n        <Box\n          display = \"flex\"\n          justifyContent = \"center\"\n          marginBottom = {2}\n        >\n          {/* Brands Header */}\n          <h2 style={{ color: 'darkblue'}}>Brew Brands</h2>\n        </Box>\n        {/* Brands */}\n        <Box  \n          dangerouslySetInlineStyle = {{\n            __style : {\n              backgroundColor: '#d6c8ec'\n            }\n          }}\n          wrap \n          display = 'flex' \n          justifyContent = 'around'\n          shape = \"rounded\"\n        >\n          {this.filteredBrands(this.state).map(brand => (\n            <Box\n              key = {brand.id}\n              width = {210}\n              margin = {2}\n              paddingY = {4}\n            >\n              <Card\n                image = {\n                  <Box width= {200} height = {200}>\n                    <Image \n                      alt = \"brand\"\n                      naturalHeight = {1}\n                      naturalWidth = {1}\n                      fit = \"cover\"\n                      src = {`${apiUrl}${brand.image.url}`}\n                    />\n                  </Box>\n                }\n              >\n                <Box display= 'flex' justifyContent='center' alignItems='center' direction='column'>\n                  <h3>{brand.name}</h3>\n                  <p>{brand.description}</p>\n                  <h4>\n                    <Link to={`/${brand._id}`} >See Brews</Link>\n                  </h4>\n                </Box>\n              </Card>\n            </Box>\n          ))}\n        </Box>\n        <Spinner show={loadingBrands} accessibilityLabel= \"Loading Spinner\" />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { Toast, Box } from 'gestalt'\n\nconst ToastMessage = ({ show, message }) => (\n    show && (\n        <Box dangerouslySetInlineStyle = {{\n            __style:{\n                bottom: 250,\n                left: \"50%\",\n                transform: \"translateX(-50%)\"\n            }\n            }}\n            position = \"fixed\"\n        >\n            <Toast color=\"orange\" text={message} />\n        </Box>\n        \n    )\n)\n\nexport default ToastMessage\n","import React, { Component } from 'react'\nimport {Container, Box, Button, TextField} from 'gestalt'\nimport ToastMessage from './ToastMessage'\nimport Strapi from 'strapi-sdk-javascript/build/main'\nconst apiUrl = process.env.API_URL || 'http://localhost:1337'\nconst strapi = new Strapi(apiUrl)\n\nclass Signin extends Component {\n\n    state = {\n        username: '',\n        password: '',\n        toast: false,\n        toastMessage: '',\n        loading: false\n    }\n\n    handleChange = ({event,value}) => {\n        event.persist()\n        this.setState({ [event.target.name]: value} )\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault()\n        const {username, password} = this.state\n\n        if(this.isFormEmpty(this.state)){\n            this.showToast('Fill in all fields')\n            return;\n        }\n        // sign up user\n        try {\n            // set loading - true\n            this.setState({loading:true})\n            // make request to register user with strapi\n            const response = await strapi.login(username, password)\n            // set loading - false\n            this.setState({loading:false})\n            // put token in local storage to manage user session\n            this.setToken(response.jwt)\n            // redirect user to home page\n            this.redirectUser('/')\n\n        } catch (error) {\n            // set loading - false\n            this.setState({loading:false})\n            // show toast with error message\n            this.showToast(error.message)\n        }\n    }\n\n    setToken = (value, tokenKey = \"jwt\") => {\n        if(localStorage){\n            localStorage.setItem(tokenKey,JSON.stringify(value))\n        }\n    }\n\n    redirectUser = path => this.props.history.push(path)\n\n    isFormEmpty = ({username, password}) =>{\n        return !username  || !password;\n    }\n\n    showToast = toastMessage => {\n        this.setState({toast: true, toastMessage})\n        setTimeout(() => this.setState({toast: false, toastMessage: ''}),5000)\n    }\n\n    render() {\n        const { toastMessage, toast, loading } = this.state\n        return (\n            <Container>\n                <Box\n                    dangerouslySetInlineStyle={{\n                        __style : {\n                            backgroundColor: '#d6a3b1'\n                        }\n                    }}\n                    margin = {4}\n                    padding = {4}\n                    shape = \"rounded\"\n                    display = \"flex\"\n                    justifyContent = \"center\"\n                >\n                    {/* Sign in */}\n                    <form style={{display: 'inlineBlock', textAlign:'center', maxWidth: 450}}\n                        onSubmit = {this.handleSubmit}\n                    >\n                        <Box marginBottom={2} display=\"flex\" direction=\"column\" alignItems=\"center\">\n                            <h2 style={{color:'purple'}}>Welcome Back!</h2>\n                        </Box>\n                        <TextField\n                            id = \"username\"\n                            type = \"text\"\n                            name = \"username\"\n                            placeholder = \"Username\"\n                            onChange = {this.handleChange}\n                        />\n                        <TextField\n                            id = \"password\"\n                            type = \"password\"\n                            name = \"password\"\n                            placeholder = \"Password\"\n                            onChange = {this.handleChange}\n                        />\n                        <Button inline disabled={loading} color=\"blue\" text=\"Submit\" type=\"submit\" />\n                    </form>\n                </Box>\n                <ToastMessage show={toast} message={toastMessage} />\n            </Container>\n        )\n    }\n}\n\nexport default Signin\n","import React, { Component } from 'react'\nimport {Container, Box, Button, TextField} from 'gestalt'\nimport ToastMessage from './ToastMessage'\nimport Strapi from 'strapi-sdk-javascript/build/main'\nconst apiUrl = process.env.API_URL || 'http://localhost:1337'\nconst strapi = new Strapi(apiUrl)\n\nclass Signup extends Component {\n\n    state = {\n        username: '',\n        email: '',\n        password: '',\n        toast: false,\n        toastMessage: '',\n        loading: false\n    }\n\n    handleChange = ({event,value}) => {\n        event.persist()\n        this.setState({ [event.target.name]: value} )\n    }\n\n    handleSubmit = async e => {\n        e.preventDefault()\n        const {username, email, password} = this.state\n\n        if(this.isFormEmpty(this.state)){\n            this.showToast('Fill in all fields')\n            return;\n        }\n        // sign up user\n        try {\n            // set loading - true\n            this.setState({loading:true})\n            // make request to register user with strapi\n            const response = await strapi.register(username, email, password)\n            // set loading - false\n            this.setState({loading:false})\n            // put token in local storage to manage user session\n            this.setToken(response.jwt)\n            // redirect user to home page\n            this.redirectUser('/')\n\n        } catch (error) {\n            // set loading - false\n            this.setState({loading:false})\n            // show toast with error message\n            this.showToast(error.message)\n        }\n    }\n\n    setToken = (value, tokenKey = \"jwt\") => {\n        if(localStorage){\n            localStorage.setItem(tokenKey,JSON.stringify(value))\n        }\n    }\n\n    redirectUser = path => this.props.history.push(path)\n\n    isFormEmpty = ({username, email, password}) =>{\n        return !username || !email || !password;\n    }\n\n    showToast = toastMessage => {\n        this.setState({toast: true, toastMessage})\n        setTimeout(() => this.setState({toast: false, toastMessage: ''}),5000)\n    }\n\n    render() {\n        const { toastMessage, toast, loading } = this.state\n        return (\n            <Container>\n                <Box\n                    dangerouslySetInlineStyle={{\n                        __style : {\n                            backgroundColor: '#ebe2da'\n                        }\n                    }}\n                    margin = {4}\n                    padding = {4}\n                    shape = \"rounded\"\n                    display = \"flex\"\n                    justifyContent = \"center\"\n                >\n                    {/* Sign up */}\n                    <form style={{display: 'inlineBlock', textAlign:'center', maxWidth: 450}}\n                        onSubmit = {this.handleSubmit}\n                    >\n                        <Box marginBottom={2} display=\"flex\" direction=\"column\" alignItems=\"center\">\n                            <h2 style={{color:'orange'}}>Let's Get Started</h2>\n                            <p style={{color:'orchid'}}>Sign up to order some brews</p>\n                        </Box>\n                        <TextField\n                            id = \"username\"\n                            type = \"text\"\n                            name = \"username\"\n                            placeholder = \"Username\"\n                            onChange = {this.handleChange}\n                        />\n                        <TextField\n                            id = \"email\"\n                            type = \"email\"\n                            name = \"email\"\n                            placeholder = \"Email Address\"\n                            onChange = {this.handleChange}\n                        />\n                        <TextField\n                            id = \"password\"\n                            type = \"password\"\n                            name = \"password\"\n                            placeholder = \"Password\"\n                            onChange = {this.handleChange}\n                        />\n                        <Button inline disabled={loading} color=\"blue\" text=\"Submit\" type=\"submit\" />\n                    </form>\n                </Box>\n                <ToastMessage show={toast} message={toastMessage} />\n            </Container>\n        )\n    }\n}\n\nexport default Signup","export const calculateAmount = items => {\n    return Number(items\n        .reduce((acc,item) => acc + item.quantity * item.price, 0)\n        .toFixed(2))\n}\n\nexport const clearCart = (tokenKey = \"cart\") => {\n    if(localStorage){\n        localStorage.removeItem(tokenKey)\n    }\n}","import React, { Component } from 'react'\nimport {Container, Box, Button, TextField, Heading, Text, Modal, Spinner} from 'gestalt'\nimport ToastMessage from './ToastMessage'\nimport {Elements, StripeProvider, CardElement, injectStripe} from 'react-stripe-elements'\nimport { calculateAmount, clearCart } from '../utils'\nimport {withRouter} from 'react-router-dom'\nimport Strapi from 'strapi-sdk-javascript/build/main'\nconst apiUrl = process.env.API_URL || 'http://localhost:1337'\nconst strapi = new Strapi(apiUrl)\n\nclass _CheckoutForm extends Component {\n\n    state = {\n        cartItems: [],\n        address: '',\n        postalCode: '',\n        city: '',\n        confirmationEmailAddress: '',\n        toast: false,\n        toastMessage: '',\n        orderProcessing: false,\n        modal: false\n    }\n\n    getCart = (cartKey = \"cart\") => {\n        if(localStorage && localStorage.getItem(cartKey)){\n            return JSON.parse(localStorage.getItem(cartKey))\n        }\n        return []\n    }\n\n    componentDidMount() {\n        this.setState({cartItems: this.getCart() })\n    }\n\n    handleChange = ({event,value}) => {\n        event.persist()\n        this.setState({ [event.target.name]: value} )\n    }\n\n    handleConfirmOrder = async e => {\n        e.preventDefault()\n        // const {username, email, password} = this.state\n\n        if(this.isFormEmpty(this.state)){\n            this.showToast('Fill in all fields')\n            return;\n        }\n\n        this.setState({modal:true})\n    }\n\n    handleSubmitOrder = async () => {\n        const {cartItems, city,address,postalCode} = this.state\n\n        const amount = calculateAmount(cartItems)\n\n        this.setState({orderProcessing:true})\n        let token;\n        try {\n            // create stripe token\n            const response = await this.props.stripe.createToken()\n            token = response.token.id\n            // create order with strapi sdk\n            await strapi.createEntry('orders', {\n                amount,\n                brews: cartItems,\n                city,\n                postalCode,\n                address,\n                token\n            })\n            // set orderprocessing - false, set modal - false in state\n            this.setState({orderProcessing:false,modal:false})\n            // clear user cart\n            clearCart()\n            // show success toast\n            this.showToast(\"Your Order has been successfully placed\", true)\n\n        } catch (error) {\n            // set orderprocessing - false, set modal - false in state\n            this.setState({orderProcessing:false,modal:false})\n            // show error toast\n            this.showToast(error.message)\n        }\n    }\n\n    isFormEmpty = ({address, postalCode, city, confirmationEmailAddress}) =>{\n        return !address || !postalCode || !city || !confirmationEmailAddress;\n    }\n\n    showToast = (toastMessage, redirect = false) => {\n        this.setState({toast: true, toastMessage})\n        setTimeout(() => this.setState({toast: false, toastMessage: ''},\n        // if true is passed, redirect to home\n        () => redirect && this.props.history.push('/')\n        ),3000)\n    }\n\n    displayTotalPrice = cartItems => {\n        const price = cartItems.reduce((acc,item) => acc + item.quantity * item.price,0).toFixed(2)\n        return (\n         <h4>Total price: ${price}</h4>\n        )\n    }\n\n    closeModal = () => this.setState({modal:false})\n\n    render() {\n        const {toastMessage, toast, cartItems, modal, orderProcessing} = this.state\n        return (\n            <Container>\n                <Box\n                    color = \"darkWash\"\n                    margin = {4}\n                    padding = {4}\n                    shape = \"rounded\"\n                    display = \"flex\"\n                    justifyContent = \"center\"\n                    alignItems = \"center\"\n                    direction = \"column\"\n                >\n                    <h2 style={{color:'darkblue'}}>Checkout</h2>\n                    { cartItems.length > 0 ? <React.Fragment>\n                        {/* user cart */}\n                        <Box \n                            display = \"flex\"\n                            justifyContent = \"center\"\n                            alignItems = \"center\"\n                            direction = \"column\"\n                            marginTop = {2}\n                            marginBottom = {6}\n                        >\n                            <i style={{color:'gray'}}>{cartItems.length} Items for Checkout</i>\n                            <Box padding = {1}>\n                                {cartItems &&  cartItems.map(item => (\n                                    <Box key={item._id} padding = {1}>\n                                        <p>\n                                            {item.name} * {item.quantity} - ${(item.quantity * item.price).toFixed(2)}\n                                        </p>\n                                    </Box>\n                                ))}\n                            </Box>\n                            {/* display total amount */}\n                            {this.displayTotalPrice(cartItems)}\n                        </Box>\n                        {/* checkout form */}\n                        <form style={{display: 'inlineBlock', textAlign:'center', maxWidth: 450}}\n                        onSubmit = {this.handleConfirmOrder}\n                    > \n                            <TextField\n                                id = \"address\"\n                                type = \"text\"\n                                name = \"address\"\n                                placeholder = \"Shipping Address\"\n                                onChange = {this.handleChange}\n                            /> \n     \n                            <TextField\n                                id = \"postalCode\"\n                                type = \"text\"\n                                name = \"postalCode\"\n                                placeholder = \"Postal Code\"\n                                onChange = {this.handleChange}\n                            />\n\n                            <TextField\n                                id = \"city\"\n                                type = \"text\"\n                                name = \"city\"\n                                placeholder = \"City of Residence\"\n                                onChange = {this.handleChange}\n                            />\n\n                        <TextField\n                            id = \"confirmationEmailAddress\"\n                            type = \"email\"\n                            name = \"confirmationEmailAddress\"\n                            placeholder = \"Confirmation Email Address\"\n                            onChange = {this.handleChange}\n                        />\n                        {/* credit card element */}\n                        <CardElement id=\"stripe__input\" onReady = {input => input.focus()} />\n                        <button id=\"stripe__button\" type=\"submit\">Submit</button>\n                    </form>\n                     </React.Fragment>  \n                        : (\n                            //default text\n                            <Box color = \"darkWash\" shape=\"rounded\" padding={4}>\n                                <Heading align = \"center\" color =\"watermelon\" size=\"xs\" >Your Cart is Empty</Heading>\n                                <Text align = \"center\" italic color=\"green\">Add some brews!</Text>\n                            </Box>\n                        ) \n                    }\n                </Box>\n                {/* confirmation modal area */}\n                {modal && (\n                    <ConfirmationModal \n                        orderProcessing={orderProcessing} \n                        cartItems = {cartItems}\n                        closeModal = {this.closeModal}\n                        handleSubmitOrder = {this.handleSubmitOrder}\n                    />\n                )}\n                <ToastMessage show={toast} message={toastMessage} />\n            </Container>\n        )\n    }\n}\n\nconst displayTotalPrice = cartItems => {\n    const price = cartItems.reduce((acc,item) => acc + item.quantity * item.price,0).toFixed(2)\n    return (\n     <h4>Total price: ${price}</h4>\n    )\n}\n\nconst ConfirmationModal = ({orderProcessing,cartItems,closeModal,handleSubmitOrder}) => (\n    <Modal\n        accessibilityModalLabel = \"Confirm your order\"\n        accessibilityCloseLabel = \"close\"\n        heading = \"Confirm your order\"\n        onDismiss = {closeModal}\n        footer = {\n            <Box display=\"flex\" marginLeft={-1} marginRight={-1} justifyContent=\"center\">\n                <Box padding = {1}>\n                    <Button \n                        size = \"lg\"\n                        color = \"red\"\n                        text = \"Submit\"\n                        disabled = {orderProcessing}\n                        onClick = {handleSubmitOrder}\n                    />\n                </Box>\n                <Box padding = {1}>\n                    <Button \n                        size = \"lg\"\n                        color = \"red\"\n                        text = \"Cancel\"\n                        disabled = {orderProcessing}\n                        onClick = {closeModal}\n                    />\n                </Box>\n            </Box>\n        }\n        role = \"alertdialog\"\n        size = \"sm\"\n    >\n        {/* order summary */}\n        {!orderProcessing && (\n            <Box\n                color = \"lightWash\"\n                padding = {2}\n                display = \"flex\"\n                justifyContent = \"center\"\n                alignItems = \"center\"\n                direction = \"column\"\n            >\n                {cartItems &&  cartItems.map(item => (\n                    <Box key={item._id} padding = {1}>\n                        <p>\n                            {item.name} * {item.quantity} - ${(item.quantity * item.price).toFixed(2)}\n                        </p>\n                    </Box>\n                ))}\n                <Box paddingY={2}>\n                    {displayTotalPrice(cartItems)}\n                </Box>\n            </Box>\n        )}\n\n        {/* order processing spinner */}\n        <Spinner show={orderProcessing} accessibilityLabel=\"Order Processing Spinner\" />\n        { orderProcessing && <Text align=\"center\" italic>Submitting Order</Text> }\n    </Modal>\n)  \n\nconst CheckoutForm = withRouter(injectStripe(_CheckoutForm))\n\nconst Checkout = () => (\n    <StripeProvider apiKey= \"pk_test_51HGMTaB4S3gJ2M1JO4XPli9yII2FgLMaX7ttSNtobuZJM1a1UKrB4v0sMkKOMgkBaYtMPR1yzn1Z2ubZOEY1AX7800Ii9pweJk\">\n        <Elements>\n            <CheckoutForm />\n        </Elements>\n    </StripeProvider>\n)\n\nexport default Checkout","import React, { Component } from 'react'\nimport Strapi from 'strapi-sdk-javascript/build/main'\nimport { Link } from 'react-router-dom';\nimport { Box, Card, Image, Button, Icon, Spinner, Mask, IconButton } from 'gestalt'\nconst apiUrl = process.env.API_URL || 'http://localhost:1337'\nconst strapi = new Strapi(apiUrl)\n\nclass Brews extends Component {\n\n    state = {\n        brews: [],\n        brand: '',\n        cartItems: []\n    }\n\n    async componentDidMount() {\n        try {\n            // console.log(this.props.match.params.brandId);\n            const response = await strapi.request('POST', '/graphql', {\n                data: {\n                    query : `query {\n                        brand(id: \"${this.props.match.params.brandId}\"){\n                        _id\n                        name\n                        brews {\n                            _id\n                            name\n                            description\n                            price\n                            image {\n                            url\n                            }\n                        }\n                        }\n                    }`\n                }\n            })\n            this.setState({\n                brews: response.data.brand.brews, \n                brand: response.data.brand.name,\n                cartItems: this.getCart()\n            })\n            // console.log(response);\n        } catch (error) {\n            console.log(error);\n        }\n        \n    }\n\n    addToCart = brew => {\n        const alreadyInCart = this.state.cartItems.findIndex(item => item._id === \n            brew._id);\n        if (alreadyInCart === -1){\n            const updatedItems = this.state.cartItems.concat({\n                ...brew,\n                quantity: 1\n            })\n            this.setState({cartItems: updatedItems}, () => this.setCart(updatedItems))\n        } else {\n            const updatedItems = [...this.state.cartItems]\n            updatedItems[alreadyInCart].quantity += 1;\n            this.setState({cartItems: updatedItems}, () => this.setCart(updatedItems))\n        }\n    }\n\n    deleteItemFromCart = itemDeleteId => {\n        const filteredItems = this.state.cartItems.filter(item => item._id !== itemDeleteId)\n        this.setState({cartItems: filteredItems}, () => this.setCart(filteredItems))\n    }\n\n    displayTotalPrice = cartItems => {\n        const price = cartItems.reduce((acc,item) => acc + item.quantity * item.price,0).toFixed(2)\n        return (\n         <h4>Total price: ${price}</h4>\n        )\n    }\n\n    setCart = (value,cartKey = \"cart\") => {\n        if(localStorage){\n            localStorage.setItem(cartKey, JSON.stringify(value))\n        }\n    }\n\n    getCart = (cartKey = \"cart\") => {\n        if(localStorage && localStorage.getItem(cartKey)){\n            return JSON.parse(localStorage.getItem(cartKey))\n        }\n        return []\n    }\n\n    render() {\n        const {brand, brews, cartItems} = this.state\n        return (\n            <Box marginTop={4} \n                display=\"flex\" \n                justifyContent=\"center\" \n                alignItems=\"start\"\n                dangerouslySetInlineStyle = {{\n                    __style : {\n                        flexWrap: 'wrap-reverse',\n                        backgroundColor: '#fff'\n                    }\n                    }} \n            >\n                {/* Brews section */}\n                <Box display=\"flex\" direction=\"column\" alignItems=\"center\">\n                    {/* Brews Heading */}\n                    <Box>\n                        <h2 style={{color:'orange'}}>{brand}</h2>\n                    </Box>\n               \n                    {/* Brews */}\n                    <Box \n                        wrap\n                        shape = \"rounded\"\n                        display = \"flex\"\n                        justifyContent = \"center\"\n                        // padding = {4}\n                    >\n                        {brews && brews.map(brew => (\n                            <Box \n                                key = {brew._id}\n                                width = {210}\n                                margin = {3}\n                                paddingY = {4}\n                            >\n                            <Card\n                            image = {\n                                <Box width= {210} height = {210}>\n                                <Image \n                                    alt = \"brand\"\n                                    naturalHeight = {1}\n                                    naturalWidth = {1}\n                                    fit = \"cover\"\n                                    src = {`${apiUrl}${brew.image.url}`}\n                                />\n                                </Box>\n                            }\n                            >\n                            <Box display= 'flex' justifyContent='center' alignItems='center' direction='column'>\n                                <Box >\n                                    <h3>{brew.name}</h3>\n                                </Box>\n                                <p>{brew.description}</p>\n                                <p style={{color:'orchid'}}>${brew.price}</p>\n                                <Box >\n                                    <h4>\n                                    {/* <Link to={`/${brew._id}`} >See Brews</Link> */}\n                                        <Button onClick={() => this.addToCart(brew)} color = \"blue\" text = \"Add to Cart\" />\n                                    </h4>\n                                </Box>\n                            </Box>\n                            </Card>\n                        </Box>\n                        ))}\n                    </Box>\n                </Box>    \n\n                {/* user cart */}\n                <Box alignSelf=\"end\" marginTop={4} marginLeft={8}>\n                    <Mask shape=\"rounded\" wash>\n                          <Box display=\"flex\" direction=\"column\" alignItems=\"center\" padding={2}>\n                              {/* cart Heading */}\n                              <h3>Your Cart</h3>\n                              {cartItems.length === 1 ? <i>{cartItems.length} item selected</i> \n                                : <i>{cartItems.length} items selected</i>}\n                              {/* cart items */}\n                              { cartItems && cartItems.map(item => (\n                                  <Box key={item._id} display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n                                        <p>{item.name} * {item.quantity} - ${(item.quantity * item.price).toFixed(2)}</p>\n                                        <Box marginTop={-1}>\n                                            <IconButton accessibilityLabel=\"Delete Item\"\n                                                icon=\"clear\"\n                                                size=\"md\"\n                                                iconColor=\"red\"\n                                                onClick = {() => this.deleteItemFromCart(item._id)}\n                                            />\n                                        </Box>\n                                        \n                                  </Box>\n                              ))}\n                              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" direction=\"column\">\n                                <Box margin={2}>\n                                    {cartItems.length === 0 && (\n                                        <p style={{color:'red'}}>Please select some items</p>\n                                    )}\n                                </Box>\n                                {/* <h4>Total: $3.99</h4> */}\n                                {this.displayTotalPrice(cartItems)}\n                                <h4>\n                                    <Link to=\"/checkout\">Checkout</Link>\n                                </h4>\n                              </Box>\n                          </Box>\n                    </Mask>\n                </Box>\n            </Box>\n        )\n    }\n}\n\nexport default Brews\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'gestalt/dist/gestalt.css'\nimport Navbar from './components/Navbar'\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport Signin from './components/Signin';\nimport Signup from './components/Signup';\nimport Checkout from './components/Checkout';\nimport Brews from './components/Brews';\n\nconst getToken = (tokenKey = \"jwt\") => {\n    if(localStorage && localStorage.getItem(tokenKey)) {\n        return JSON.parse(localStorage.getItem(tokenKey))\n    }\n    return null\n}\n\nconst PrivateRoute = ({component: Component, ...rest}) => (\n    <Route {...rest} render= { props => (\n        getToken() !== null \n            ? <Component {...props} /> \n            : <Redirect to={{ pathname: '/signin', state: { from: props.location } }} />\n    )} />\n)\n\nconst Root = () => (\n    <BrowserRouter>\n        <React.Fragment>\n            <Navbar />\n            <Switch>\n                <Route exact path=\"/\" component={App} />\n                <Route path=\"/signin\" component={Signin} />\n                <Route path=\"/signup\" component={Signup} />\n                <PrivateRoute path=\"/checkout\" component={Checkout} />\n                <Route path=\"/:brandId\" component={Brews} />\n                                \n            </Switch>\n        </React.Fragment>\n    </BrowserRouter>\n)\n\n\nReactDOM.render(<Root />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}